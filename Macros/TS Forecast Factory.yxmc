<?xml version="1.0"?>
<AlteryxDocument yxmdVer="2022.1">
  <Nodes>
    <Node ToolID="1">
      <GuiSettings Plugin="AlteryxGuiToolkit.TextBox.TextBox">
        <Position x="54" y="54" width="780" height="60" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Text>Alteryx Macro: Time Series Forecast Factory</Text>
          <Font name="Segoe UI" size="15.75" style="0" />
          <TextColor name="White" />
          <FillColor r="0" g="128" b="192" />
          <Shape shape="0" />
          <Justification Justification="0" />
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="2">
      <GuiSettings Plugin="AlteryxGuiToolkit.Questions.Tab.Tab">
        <Position x="0" y="0" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Configuration />
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="3">
      <GuiSettings Plugin="AlteryxBasePluginsGui.MacroInput.MacroInput">
        <Position x="150" y="498" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <UseFileInput value="True" />
          <Name>Model Data</Name>
          <Abbrev>M</Abbrev>
          <ShowFieldMap value="False" />
          <Optional value="False" />
          <FileInput>
            <Configuration>
              <Passwords />
              <File OutputFileName="" FileFormat="19" SearchSubDirs="False" RecordLimit="">widgets_and_grommets.yxdb</File>
              <FormatSpecificOptions />
            </Configuration>
          </FileInput>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText>widgets_and_grommets.yxdb</DefaultAnnotationText>
          <Left value="True" />
        </Annotation>
        <MetaInfo connection="Output">
          <RecordInfo>
            <Field name="Name" size="1073741823" source="R-DATA:" type="V_WString" />
            <Field name="Object" size="2147483647" source="R-DATA:SERIAL" type="Blob" />
          </RecordInfo>
        </MetaInfo>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxMacroInput" />
    </Node>
    <Node ToolID="4">
      <GuiSettings Plugin="AlteryxGuiToolkit.Questions.Tab.Tab">
        <Position x="0" y="0" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Configuration />
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="5">
      <GuiSettings Plugin="AlteryxGuiToolkit.Questions.Tab.Tab">
        <Position x="0" y="0" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Configuration />
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="20">
      <GuiSettings Plugin="AlteryxRPluginGui.R">
        <Position x="282" y="510" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <RScript>########
### METAINFO BLOCK

if (!('package:AlteryxRDataX' %in% search())){
  library(AlteryxRhelper)
  # COMMENT OUT IN ALTERYX ----
  Q &lt;- list(
    large_conf = 90,
    small_conf = 80,
    horizon = 6
  )
}

Q &lt;- list(
  large_conf = %Question.large_conf%,
  small_conf = %Question.small_conf%,
  horizon = %Question.horizon%
)


# Makes sure the suggested object name is acceptable to R
fcast.name &lt;- validName('%Question.forecast%')

# Build the MetaInfo-----
all.names.out3 &lt;- c("Group", "Period", "Sub_Period", fcast.name,
                    paste(fcast.name, "high", Q$large_conf, sep = "_"),
                    paste(fcast.name, "high", Q$small_conf, sep = "_"),
                    paste(fcast.name, "low", Q$small_conf, sep = "_"),
                    paste(fcast.name, "low", Q$large_conf, sep = "_"))

if (AlteryxFullUpdate) {
  # Output 3
  write.AlteryxAddFieldMetaInfo(nOutput = 3, name = "Group", fieldType = "V_WString", size = 1073741823, source = "R-Data:")
  write.AlteryxAddFieldMetaInfo(nOutput = 3, name = "Period", fieldType = "Double", size = 8, source = "R-Data:")
  write.AlteryxAddFieldMetaInfo(nOutput = 3, name = "Sub_Period", fieldType = "Int32", size = 4, source = "R-Data:")
  for(i in 4:length(all.names.out3)) {
    write.AlteryxAddFieldMetaInfo(nOutput = 3, name = all.names.out3[i], fieldType = "Double", size = 8, source = "R-Data:")
  }
} else {
  ### MAIN SCRIPT------
  # Load the forecast library------
  loadPackages("forecast")
  
  #Read in both the data and the model------
  #We know that input #1 is the model object, and input #2 is the predicted values for the covariates.
  all.models &lt;- read.Alteryx("#1")
  all.covars &lt;- read.Alteryx("#2")
  
  #Clause if covariates were used in the original models----
  if (nrow(all.covars) &gt; 0) {
    
    if (!(all(names(all.models) %in% c("Name", "Object")))) {
      stop.Alteryx("The input from stream M was not a model generated by TS Model Factory. Please use TS Model Factory to generate your input and try again.")
    }
    number.of.groups &lt;- (nrow(all.models))
    covar.indic &lt;- vector(mode = "logical", length = number.of.groups)
    for (i in 1:number.of.groups) {
      current.model &lt;- all.models[i,2]
      current.model &lt;- unserializeObject(as.character(current.model))
      if (is.null(current.model$xreg)) {
        current.warning &lt;- paste0("Model ", all.models[i,1], "wasn't created with covariates. It's recommended that you filter your models so that you have one collection of models with covariates and one collection for those without covariates. However, a forecast for this univariates model will still be provided.")
        AlteryxMessage(current.warning, iType = 2, iPriority = 3)
      }
      else {
        covar.indic[i] &lt;- TRUE
      }
    }
    
    horizon &lt;- as.numeric('%Question.horizon%')
    if (nrow(all.covars) != ((sum(covar.indic)) * horizon)) {
      current.error.message &lt;- paste0("The number of covariate records (", nrow(all.covars), ") does not equal the product of the number of models which used covariates (", sum(covar.indic), ") and the number of periods to be forecasted (", ('%Question.horizon%'), ").")
      stop.Alteryx(current.error.message)
    }
    
    #Loop through all the groups -----
    j &lt;- 1
    for (i in 1:((dim(all.models))[1])) {
      the.model &lt;- all.models[i,]
      mod.obj &lt;- unserializeObject(as.character(the.model$Object[1]))
      if (!(inherits(mod.obj, "Arima")))
        stop.Alteryx("The model provided is not an ARIMA model. If you used an ETS model, uncheck the box for 'Did your original TS models include covariates?' and try again. Other time series models aren't supported by TS Forecast Factory at this time.")
      
      # Make sure that an ARIMA object is provided
      if (is.null(mod.obj)) {
        stop.Alteryx("No model object has not been provided. Please check the data you put into the M input stream and try again.")
      }
      if (covar.indic[i]) {   
        # Make sure the fields needed to make the forecast are provided in the data
        forecast.start &lt;- (((j - 1) * (%Question.horizon%)) + 1)
        forecast.end &lt;- (j * (%Question.horizon%))
        the.covars &lt;- all.covars[forecast.start:forecast.end,]
        # Turn the provided data into the needed covariate matrix
        the.covars &lt;- as.data.frame(the.covars)
        covars1 &lt;- model.matrix(~., data = the.covars)
        covars &lt;- covars1[, -1, drop = FALSE]
        # Makes sure the suggested object name is acceptable to R
        fcast.name &lt;- validName('%Question.forecast%')
        # Create the forecast and the confidence intervals around the forecast
        conf.ints &lt;- c(%Question.small_conf%, %Question.large_conf%)
        fcast &lt;- forecast(mod.obj, h = nrow(covars), xreg = covars, level = conf.ints)
        upper &lt;- as.data.frame(fcast$upper)
        names(upper) &lt;- c("high", "low")
        lower &lt;- as.data.frame(fcast$lower)
        names(lower) &lt;- c("high", "low")
        
        # Create the dates
        the.start = start(fcast$mean)
        start.major &lt;- the.start[1]
        start.minor &lt;- the.start[2]
        the.end = end(fcast$mean)
        end.major &lt;- the.end[1]
        end.minor &lt;- the.end[2]
        freq &lt;- frequency(fcast$mean)
        if (start.major == end.major) {
          minor &lt;- start.minor:end.minor
          major &lt;- rep(start.major, length(minor))
        } else {
          if (end.major - start.major == 1) {
            minor &lt;- c(start.minor:freq, 1:end.minor)
            major &lt;- c(rep(start.major, freq - start.minor + 1), rep(end.major, end.minor))
          } else {
            interim &lt;- (start.major + 1):(end.major - 1)
            minor &lt;- c(start.minor:freq, rep(1:freq, length(interim)), 1:end.minor)
            major &lt;- c(rep(start.major, freq - start.minor + 1), unlist(lapply(interim, function(x) rep(x, freq))), rep(end.major, end.minor))
          }
        }
        
        # Put it all together
        current.group &lt;- all.models[i,1]
        fcast.df &lt;- data.frame(current.group, major = major, minor = minor, forecast = as.numeric(fcast$mean), upper.low = upper$low,
                               upper.high = upper$high, lower.high = lower$high, lower.low = lower$low)
        names(fcast.df) &lt;- c("Group", "Period", "Sub_Period", fcast.name, paste(fcast.name, "high", %Question.large_conf%, sep = "_"),
                             paste(fcast.name, "high", %Question.small_conf%, sep = "_"), paste(fcast.name, "low", %Question.small_conf%, sep = "_"),
                             paste(fcast.name, "low", %Question.large_conf%, sep = "_"))
        # If the frequency is 1, then remove the sub-period field
        if (freq == 1)
          fcast.df$Sub_Period &lt;- NULL
        
        # Write things out to Alteryx
        write.Alteryx(fcast.df, nOutput = 1)
        j &lt;- j + 1
      }
      ####Forecast for models which didn't use covariates but were nested among covariate models -----
      else {  
        the.model &lt;- all.models[i, ]
        # Unserialze the model object and make sure it is one of the allowed classes
        mod.obj &lt;- unserializeObject(as.character(the.model$Object[1]))
        mod.class &lt;- class(mod.obj)[1]
        
        # Create the forecast and the confidence intervals around the forecast
        conf.ints &lt;- c(Q$small_conf, Q$large_conf)
        fcast &lt;- forecast(mod.obj, h = Q$horizon, level = conf.ints)
        upper &lt;- as.data.frame(fcast$upper)
        names(upper) &lt;- c("high", "low")
        lower &lt;- as.data.frame(fcast$lower)
        names(lower) &lt;- c("high", "low")
        
        # Create the dates
        the.start = start(fcast$mean)
        start.major &lt;- the.start[1]
        start.minor &lt;- the.start[2]
        the.end = end(fcast$mean)
        end.major &lt;- the.end[1]
        end.minor &lt;- the.end[2]
        freq &lt;- frequency(fcast$mean)
        if (start.major == end.major) {
          minor &lt;- start.minor:end.minor
          major &lt;- rep(start.major, length(minor))
        } else {
          if (end.major - start.major == 1) {
            minor &lt;- c(start.minor:freq, 1:end.minor)
            major &lt;- c(rep(start.major, freq - start.minor + 1), rep(end.major, end.minor))
          } else {
            interim &lt;- (start.major + 1):(end.major - 1)
            minor &lt;- c(start.minor:freq, rep(1:freq, length(interim)), 1:end.minor)
            major &lt;- c(rep(start.major, freq - start.minor + 1), unlist(lapply(interim, function(x) rep(x, freq))), rep(end.major, end.minor))
          }
        }
        
        # Put it all together
        group.field &lt;- all.models[i, 1]
        fcast.df &lt;- data.frame(group.field, major = major, minor = minor, forecast = as.numeric(fcast$mean), upper.low = upper$low,
                               upper.high = upper$high, lower.high = lower$high, lower.low = lower$low)
        names(fcast.df) &lt;- c("Group", "Period", "Sub_Period", fcast.name, paste(fcast.name, "high", Q$large_conf, sep = "_"),
                             paste(fcast.name, "high", Q$small_conf, sep = "_"), paste(fcast.name, "low", Q$small_conf, sep = "_"),
                             paste(fcast.name, "low", Q$large_conf, sep = "_"))
        # If the frequency is 1, then remove the sub-period field
        if (freq == 1) {
          fcast.df$Sub_Period &lt;- NULL}
        
        
        # Write things out to Alteryx
        write.Alteryx(fcast.df, nOutput = 3)
      }
      
    }
  }
  
  else {
    # Get the time series model assuming no covariates were used. -----
    
    for (i in 1 : nrow(all.models)) {
      current.model &lt;- all.models[i,2]
      current.model &lt;- unserializeObject(as.character(current.model))
      if (!is.null(current.model$covars)) {
        current.warning &lt;- paste0("Model ", all.models[i,1], "was created with covariates. You should filter your models so that you have one collection of models with covariates and one collection for those without covariates. Make sure you include the appropriate number of predicted values for your covariates if your original TS model used them.")
        AlteryxMessage(current.warning, iType = 2, iPriority = 3)
      }
    }
    # Error checking and deserializing the model object
    # The allowed classes
    allowed.classes &lt;- c("Arima", "ets")
    
    if (!all(names(all.models) %in% c("Name", "Object")))
      stop.Alteryx("The input stream does not appear to composed of R model objects.")
    
    for (i in 1:((dim(all.models))[1])) {
      the.model &lt;- all.models[i, ]
      # Unserialze the model object and make sure it is one of the allowed classes
      mod.obj &lt;- unserializeObject(as.character(the.model$Object[1]))
      mod.class &lt;- class(mod.obj)[1]
      if (!(inherits(mod.obj, allowed.classes)))
        stop.Alteryx(paste("The model", the.model$Name[1], "is not an allowed time series model."))
      
      
      # Create the forecast and the confidence intervals around the forecast
      conf.ints &lt;- c(Q$small_conf, Q$large_conf)
      fcast &lt;- forecast(mod.obj, h = Q$horizon, level = conf.ints)
      upper &lt;- as.data.frame(fcast$upper)
      names(upper) &lt;- c("high", "low")
      lower &lt;- as.data.frame(fcast$lower)
      names(lower) &lt;- c("high", "low")
      
      # Create the dates
      the.start = start(fcast$mean)
      start.major &lt;- the.start[1]
      start.minor &lt;- the.start[2]
      the.end = end(fcast$mean)
      end.major &lt;- the.end[1]
      end.minor &lt;- the.end[2]
      freq &lt;- frequency(fcast$mean)
      if (start.major == end.major) {
        minor &lt;- start.minor:end.minor
        major &lt;- rep(start.major, length(minor))
      } else {
        if (end.major - start.major == 1) {
          minor &lt;- c(start.minor:freq, 1:end.minor)
          major &lt;- c(rep(start.major, freq - start.minor + 1), rep(end.major, end.minor))
        } else {
          interim &lt;- (start.major + 1):(end.major - 1)
          minor &lt;- c(start.minor:freq, rep(1:freq, length(interim)), 1:end.minor)
          major &lt;- c(rep(start.major, freq - start.minor + 1), unlist(lapply(interim, function(x) rep(x, freq))), rep(end.major, end.minor))
        }
      }
      
      # Put it all together
      group.field &lt;- all.models[i, 1]
      fcast.df &lt;- data.frame(group.field, major = major, minor = minor, forecast = as.numeric(fcast$mean), upper.low = upper$low,
                             upper.high = upper$high, lower.high = lower$high, lower.low = lower$low)
      names(fcast.df) &lt;- c("Group", "Period", "Sub_Period", fcast.name, paste(fcast.name, "high", Q$large_conf, sep = "_"),
                           paste(fcast.name, "high", Q$small_conf, sep = "_"), paste(fcast.name, "low", Q$small_conf, sep = "_"),
                           paste(fcast.name, "low", Q$large_conf, sep = "_"))
      # If the frequency is 1, then remove the sub-period field
      if (freq == 1) {
        fcast.df$Sub_Period &lt;- NULL}
      
      
      # Write things out to Alteryx
      write.Alteryx(fcast.df, nOutput = 3)
    } 
  }
}</RScript>
          <UseFullUpdate value="True" />
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
        <MetaInfo connection="Output3">
          <RecordInfo>
            <Field name="Group" size="1073741823" source="R-Data:" type="V_WString" />
            <Field name="Period" source="R-Data:" type="Double" />
            <Field name="Sub_Period" source="R-Data:" type="Int32" />
            <Field name="sales" source="R-Data:" type="Double" />
            <Field name="sales_high_95" source="R-Data:" type="Double" />
            <Field name="sales_high_80" source="R-Data:" type="Double" />
            <Field name="sales_low_80" source="R-Data:" type="Double" />
            <Field name="sales_low_95" source="R-Data:" type="Double" />
          </RecordInfo>
        </MetaInfo>
        <MetaInfo connection="Output1">
          <RecordInfo>
            <Field name="Group" size="1073741823" source="R-DATA:" type="V_WString" />
            <Field name="Period" source="R-DATA:" type="Double" />
            <Field name="Sub_Period" source="R-DATA:" type="Int32" />
            <Field name="sales" source="R-DATA:" type="Double" />
            <Field name="sales_high_95" source="R-DATA:" type="Double" />
            <Field name="sales_high_80" source="R-DATA:" type="Double" />
            <Field name="sales_low_80" source="R-DATA:" type="Double" />
            <Field name="sales_low_95" source="R-DATA:" type="Double" />
          </RecordInfo>
        </MetaInfo>
      </Properties>
      <EngineSettings EngineDll="AlteryxRPluginEngine.dll" EngineDllEntryPoint="AlteryxR" />
    </Node>
    <Node ToolID="22">
      <GuiSettings Plugin="AlteryxBasePluginsGui.BrowseV2.BrowseV2">
        <Position x="630" y="498" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <TempFile>C:\Users\btoomey\AppData\Local\Temp\Engine_9284_1755009bd50a426d99dbf5933b247a40_\Engine_5736_17aa0bf5c5cd4eb29f70ab8dc7831ac4_.yxdb</TempFile>
          <Layout>
            <View1>
              <Hints>
                <Table />
              </Hints>
            </View1>
          </Layout>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxBrowseV2" />
    </Node>
    <Node ToolID="21">
      <GuiSettings Plugin="AlteryxBasePluginsGui.MacroOutput.MacroOutput">
        <Position x="402" y="510" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Name>Output for models with no covariates</Name>
          <Abbrev>N</Abbrev>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText>N Output</DefaultAnnotationText>
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxMacroOutput" />
    </Node>
    <Node ToolID="23">
      <GuiSettings Plugin="AlteryxBasePluginsGui.MacroInput.MacroInput">
        <Position x="150" y="594" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <UseFileInput value="False" />
          <Name>Covariate_forecasts</Name>
          <Abbrev>C</Abbrev>
          <ShowFieldMap value="False" />
          <Optional value="True" />
          <TextInput>
            <Configuration>
              <NumRows value="6" />
              <Fields>
                <Field name="Number of New Stores" />
                <Field name="Total sales amount in dollars" />
              </Fields>
              <Data>
                <r>
                  <c>0</c>
                  <c>888</c>
                </r>
                <r>
                  <c>5</c>
                  <c>1700</c>
                </r>
                <r>
                  <c>1</c>
                  <c>670.88</c>
                </r>
                <r>
                  <c>3</c>
                  <c>467</c>
                </r>
                <r>
                  <c>4</c>
                  <c>907.66</c>
                </r>
                <r>
                  <c>5</c>
                  <c>44.01</c>
                </r>
              </Data>
            </Configuration>
          </TextInput>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText>C Input</DefaultAnnotationText>
          <Left value="True" />
        </Annotation>
        <MetaInfo connection="Output">
          <RecordInfo>
            <Field name="Number of New Stores" source="TextInput:" type="Byte" />
            <Field name="Total sales amount in dollars" source="TextInput:" type="Double" />
          </RecordInfo>
        </MetaInfo>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxMacroInput" />
    </Node>
    <Node ToolID="25">
      <GuiSettings Plugin="AlteryxBasePluginsGui.MacroOutput.MacroOutput">
        <Position x="618" y="402" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Name>Output for covariate models</Name>
          <Abbrev>C</Abbrev>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText>C Output</DefaultAnnotationText>
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxMacroOutput" />
    </Node>
    <Node ToolID="19">
      <GuiSettings Plugin="AlteryxGuiToolkit.ToolContainer.ToolContainer">
        <Position x="54" y="133" width="638" height="170" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Caption>Interface Tools</Caption>
          <Style TextColor="#2f4f4f" FillColor="#ecf2f2" BorderColor="#2f4f4f" Transparency="1" Margin="25" />
          <Disabled value="False" />
          <Folded value="False" />
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <ChildNodes>
        <Node ToolID="7">
          <GuiSettings Plugin="AlteryxGuiToolkit.Questions.TextBox.QuestionTextBox">
            <Position x="79" y="182" width="59" height="59" />
          </GuiSettings>
          <Properties>
            <Configuration />
            <Annotation DisplayMode="0">
              <Name>forecast</Name>
              <DefaultAnnotationText>The field name for the point forecast</DefaultAnnotationText>
              <Left value="False" />
            </Annotation>
          </Properties>
        </Node>
        <Node ToolID="8">
          <GuiSettings Plugin="AlteryxGuiToolkit.Questions.NumericUpDown.NumericUpDown">
            <Position x="223" y="182" width="59" height="59" />
          </GuiSettings>
          <Properties>
            <Configuration />
            <Annotation DisplayMode="0">
              <Name>large_conf</Name>
              <DefaultAnnotationText>The percentage value of the larger confidence interval</DefaultAnnotationText>
              <Left value="False" />
            </Annotation>
          </Properties>
        </Node>
        <Node ToolID="9">
          <GuiSettings Plugin="AlteryxGuiToolkit.Questions.NumericUpDown.NumericUpDown">
            <Position x="367" y="182" width="59" height="59" />
          </GuiSettings>
          <Properties>
            <Configuration />
            <Annotation DisplayMode="0">
              <Name>small_conf</Name>
              <DefaultAnnotationText>The percentage value of the smaller confidence interval</DefaultAnnotationText>
              <Left value="False" />
            </Annotation>
          </Properties>
        </Node>
        <Node ToolID="10">
          <GuiSettings Plugin="AlteryxGuiToolkit.Questions.NumericUpDown.NumericUpDown">
            <Position x="511" y="182" width="59" height="59" />
          </GuiSettings>
          <Properties>
            <Configuration />
            <Annotation DisplayMode="0">
              <Name>horizon</Name>
              <DefaultAnnotationText>The number of future periods to forecast (assuming no covariates in model)</DefaultAnnotationText>
              <Left value="False" />
            </Annotation>
          </Properties>
        </Node>
      </ChildNodes>
    </Node>
    <Node ToolID="28">
      <GuiSettings Plugin="AlteryxGuiToolkit.ToolContainer.ToolContainer">
        <Position x="692" y="61" width="190" height="24" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Caption>Module Description</Caption>
          <Style TextColor="#2f4f4f" FillColor="#ffffff" BorderColor="#2f4f4f" Transparency="10" Margin="10" />
          <Disabled value="False" />
          <Folded value="True" />
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <ChildNodes>
        <Node ToolID="27">
          <GuiSettings Plugin="AlteryxGuiToolkit.TextBox.TextBox">
            <Position x="702" y="90" width="217" height="252" />
          </GuiSettings>
          <Properties>
            <Configuration>
              <Text>Using the output from the TS Model Factory macro, this macro predicts future values for multiple groups of time series. Note that if you used covariates to create your original model, you need to include future values for those covariates in the C Input. However, you shouldn't connect anything to the C input if your original model didn't use covariates.

Forecasts using covariates will appear in the C output, and those not using covariates will be in the N output.</Text>
              <Font name="Microsoft Sans Serif" size="9.75" style="0" />
              <TextColor name="Black" />
              <FillColor name="White" />
              <Shape shape="0" />
              <Justification Justification="0" />
            </Configuration>
            <Annotation DisplayMode="0">
              <Name />
              <DefaultAnnotationText />
              <Left value="False" />
            </Annotation>
          </Properties>
        </Node>
      </ChildNodes>
    </Node>
    <Node ToolID="30">
      <GuiSettings Plugin="AlteryxGuiToolkit.ToolContainer.ToolContainer">
        <Position x="728" y="85" width="141" height="24" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Caption>Tools Used</Caption>
          <Style TextColor="#2f4f4f" FillColor="#ffffff" BorderColor="#2f4f4f" Transparency="10" Margin="10" />
          <Disabled value="False" />
          <Folded value="True" />
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <ChildNodes>
        <Node ToolID="29">
          <GuiSettings Plugin="AlteryxGuiToolkit.TextBox.TextBox">
            <Position x="738" y="114" width="166" height="228" />
          </GuiSettings>
          <Properties>
            <Configuration>
              <Text>TOOLS USED:

Developer
  - R
Documentation
  - Comment
  - Tool Container
In/Out
  - Browse
Interface
  - Macro Input
  - Macro Output
  - Numeric Up/Down
  - Text Box</Text>
              <Font name="Microsoft Sans Serif" size="9.75" style="0" />
              <TextColor name="Black" />
              <FillColor r="255" g="243" b="196" />
              <Shape shape="0" />
              <Justification Justification="0" />
            </Configuration>
            <Annotation DisplayMode="0">
              <Name />
              <DefaultAnnotationText />
              <Left value="False" />
            </Annotation>
          </Properties>
        </Node>
      </ChildNodes>
    </Node>
  </Nodes>
  <Connections>
    <Connection name="#1">
      <Origin ToolID="3" Connection="Output" />
      <Destination ToolID="20" Connection="Input" />
    </Connection>
    <Connection name="#2">
      <Origin ToolID="23" Connection="Output" />
      <Destination ToolID="20" Connection="Input" />
    </Connection>
    <Connection>
      <Origin ToolID="20" Connection="Output3" />
      <Destination ToolID="22" Connection="Input" />
    </Connection>
    <Connection>
      <Origin ToolID="20" Connection="Output3" />
      <Destination ToolID="21" Connection="Input" />
    </Connection>
    <Connection>
      <Origin ToolID="20" Connection="Output1" />
      <Destination ToolID="25" Connection="Input" />
    </Connection>
  </Connections>
  <Properties>
    <Memory default="True" />
    <GlobalRecordLimit value="0" />
    <TempFiles default="True" />
    <Annotation on="True" includeToolName="False" />
    <ConvErrorLimit value="10" />
    <ConvErrorLimit_Stop value="False" />
    <CancelOnError value="False" />
    <DisableBrowse value="False" />
    <EnablePerformanceProfiling value="False" />
    <PredictiveToolsCodePage value="1252" />
    <DisableAllOutput value="False" />
    <ShowAllMacroMessages value="False" />
    <ShowConnectionStatusIsOn value="True" />
    <ShowConnectionStatusOnlyWhenRunning value="True" />
    <ZoomLevel value="0" />
    <LayoutType>Horizontal</LayoutType>
    <Constants>
      <Constant>
        <Namespace>Question</Namespace>
        <Name>forecast</Name>
        <Value>sales</Value>
        <IsNumeric value="False" />
      </Constant>
      <Constant>
        <Namespace>Question</Namespace>
        <Name>large_conf</Name>
        <Value>95</Value>
        <IsNumeric value="True" />
      </Constant>
      <Constant>
        <Namespace>Question</Namespace>
        <Name>small_conf</Name>
        <Value>80</Value>
        <IsNumeric value="True" />
      </Constant>
      <Constant>
        <Namespace>Question</Namespace>
        <Name>horizon</Name>
        <Value>3</Value>
        <IsNumeric value="True" />
      </Constant>
    </Constants>
    <MetaInfo>
      <NameIsFileName value="False" />
      <Name>TS Forecast Factory</Name>
      <Description>Provide forecasts from groups of either ARIMA or ETS models for a user-specified number of future periods.</Description>
      <RootToolName>TS_Forecast_Factory</RootToolName>
      <ToolVersion>1.0</ToolVersion>
      <ToolInDb value="False" />
      <CategoryName>Time Series</CategoryName>
      <SearchTags>forecast, arima, ets, multiple groups</SearchTags>
      <Author>Alteryx Products</Author>
      <Company>Alteryx, Inc.</Company>
      <Copyright>2016</Copyright>
      <DescriptionLink actual="" displayed="" />
      <Example>
        <Description />
        <File />
      </Example>
      <WorkflowId value="e178d7c8-8066-44c1-ac87-89be6bbb70d6" />
      <Telemetry>
        <PreviousWorkflowId value="7f7d4520-38fa-4ae8-af22-4616d2e4f672" />
        <OriginWorkflowId value="7f7d4520-38fa-4ae8-af22-4616d2e4f672" />
      </Telemetry>
    </MetaInfo>
    <Events>
      <Enabled value="True" />
    </Events>
    <RuntimeProperties>
      <Actions />
      <Questions>
        <Question>
          <Type>Tab</Type>
          <Description>Questions</Description>
          <Name>Tab (2)</Name>
          <ToolId value="2" />
          <Questions>
            <Question>
              <Type>MacroInput</Type>
              <Description>Macro Input (3)</Description>
              <Name>Macro Input (3)</Name>
              <ToolId value="3" />
            </Question>
            <Question>
              <Type>MacroOutput</Type>
              <Description>Macro Output (21)</Description>
              <Name>Macro Output (21)</Name>
              <ToolId value="21" />
            </Question>
            <Question>
              <Type>MacroInput</Type>
              <Description>Macro Input (23)</Description>
              <Name>Macro Input (23)</Name>
              <ToolId value="23" />
            </Question>
          </Questions>
        </Question>
        <Question>
          <Type>Tab</Type>
          <Description>Configuration</Description>
          <Name>Tab (4)</Name>
          <ToolId value="4" />
          <Questions>
            <Question>
              <Type>TextBox</Type>
              <Description>The field name for the point forecast</Description>
              <Name>forecast</Name>
              <ToolId value="7" />
              <Default>forecast</Default>
              <Password value="False" />
              <Multiline value="False" />
              <Hidden value="False" />
            </Question>
            <Question>
              <Type>NumericUpDown</Type>
              <Description>The percentage value of the larger confidence interval</Description>
              <Name>large_conf</Name>
              <ToolId value="8" />
              <Minimum value="1" />
              <Maximum value="99" />
              <Increment value="1" />
              <Default value="95" />
              <Decimals value="0" />
            </Question>
            <Question>
              <Type>NumericUpDown</Type>
              <Description>The percentage value of the smaller confidence interval</Description>
              <Name>small_conf</Name>
              <ToolId value="9" />
              <Minimum value="1" />
              <Maximum value="99" />
              <Increment value="1" />
              <Default value="80" />
              <Decimals value="0" />
            </Question>
            <Question>
              <Type>NumericUpDown</Type>
              <Description>The number of future periods to forecast (assuming no covariates in model)</Description>
              <Name>horizon</Name>
              <ToolId value="10" />
              <Minimum value="0" />
              <Maximum value="365" />
              <Increment value="1" />
              <Default value="6" />
              <Decimals value="0" />
            </Question>
            <Question>
              <Type>MacroOutput</Type>
              <Description>Macro Output (25)</Description>
              <Name>Macro Output (25)</Name>
              <ToolId value="25" />
            </Question>
          </Questions>
        </Question>
        <Question>
          <Type>Tab</Type>
          <Description>Graphics Options</Description>
          <Name>Tab (5)</Name>
          <ToolId value="5" />
          <Questions />
        </Question>
      </Questions>
      <ModuleType>Macro</ModuleType>
      <MacroCustomHelp value="True" />
      <MacroCustomHelpLink>AlteryxHelp:TS_Forecast_Factory</MacroCustomHelpLink>
      <MacroDynamicOutputFields value="True" />
      <MacroImage></MacroImage>
      <MacroInputs />
      <MacroOutputs />
      <Wiz_CustomHelp value="False" />
      <Wiz_CustomGraphic value="False" />
      <Wiz_ShowOutput value="True" />
      <Wiz_OpenOutputTools>
        <Tool ToolId="3" Selected="True" />
        <Tool ToolId="22" Selected="False" />
        <Tool ToolId="21" Selected="True" />
        <Tool ToolId="23" Selected="True" />
        <Tool ToolId="25" Selected="True" />
      </Wiz_OpenOutputTools>
      <Wiz_OutputMessage />
      <Wiz_NoOutputFilesMessage />
      <Wiz_ChainRunWizard />
    </RuntimeProperties>
  </Properties>
</AlteryxDocument>